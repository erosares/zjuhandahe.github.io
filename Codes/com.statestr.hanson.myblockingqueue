package com.statestr.hanson.myblockingqueue;

public class Constants {
	public static final int MAX_BUFFER_SIZE = 10;
	public static final int NUM_OF_PRODUCER = 2;
	public static final int NUM_OF_CONSUMER = 3;
}



package com.statestr.hanson.myblockingqueue;

import java.util.UUID;

public class Task {
	private String id;

	public Task() {
		id = UUID.randomUUID().toString();
	}

	public String toString() {
		return "Task[" + id + "]";
	}
}



package com.statestr.hanson.myblockingqueue;

import java.util.concurrent.BlockingQueue;

public class Producer implements Runnable {
	private BlockingQueue<Task> tasks;

	public Producer(BlockingQueue<Task> tasks) {
		this.tasks = tasks;
	}

	@Override
	public void run() {
		while (true) {
			try {
				Task task = new Task();
				tasks.put(task);
				System.out.println("Producer["
						+ Thread.currentThread().getName() + "] put " + task);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}
	}

}



package com.statestr.hanson.myblockingqueue;

import java.util.concurrent.BlockingQueue;

public class Consumer implements Runnable {
	private BlockingQueue<Task> tasks;

	public Consumer(BlockingQueue<Task> tasks) {
		this.tasks = tasks;
	}

	@Override
	public void run() {
		while (true) {
			try {
				Task task = tasks.take();
				System.out.println("Consumer["
						+ Thread.currentThread().getName() + "] got " + task);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}
	}

}



package com.statestr.hanson.myblockingqueue;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class TestBlockingQueue {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		BlockingQueue<Task> tasks = new ArrayBlockingQueue<Task>(
				Constants.MAX_BUFFER_SIZE);
		ExecutorService es = Executors
				.newFixedThreadPool(Constants.NUM_OF_CONSUMER
						+ Constants.NUM_OF_PRODUCER);
		for (int i = 0; i < Constants.NUM_OF_PRODUCER; i++) {
			es.execute(new Producer(tasks));
		}
		for (int i = 0; i < Constants.NUM_OF_CONSUMER; i++) {
			es.execute(new Consumer(tasks));
		}

	}

}

