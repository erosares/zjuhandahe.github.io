                                            SimpleDateFormat的用法及在多线程中使用的错误
URL：API http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
URL：Threads error http://rainbow702.iteye.com/blog/1155362
1.	使用：
Date and Time Pattern	Result
"yyyy.MM.dd G 'at' HH:mm:ss z"	2001.07.04 AD at 12:08:56 PDT
"EEE, MMM d, ''yy"	Wed, Jul 4, '01
"h:mm a"	12:08 PM
"hh 'o''clock' a, zzzz"	12 o'clock PM, Pacific Daylight Time
"K:mm a, z"	0:08 PM, PDT
"yyyyy.MMMMM.dd GGG hh:mm aaa"	02001.July.04 AD 12:08 PM
"EEE, d MMM yyyy HH:mm:ss Z"	Wed, 4 Jul 2001 12:08:56 -0700
"yyMMddHHmmssZ"	010704120856-0700
"yyyy-MM-dd'T'HH:mm:ss.SSSZ"	2001-07-04T12:08:56.235-0700
"yyyy-MM-dd'T'HH:mm:ss.SSSXXX"	2001-07-04T12:08:56.235-07:00
"YYYY-'W'ww-u"	2001-W27-3
2.	多线程出错
SimpleDateFormat为非线程安全。
导致SimpleDateFormat出现多线程安全问题的原因：SimpleDateFormat处理复杂，jdk的实现中使用了成员变量来传递参数，这就造成了多线程的时候会出现错误。
   三种解决方法：
URL: http://www.111cn.net/jsp/Java/38190.htm
（1）	每次使用时，都创建一个新的simpledateformat实例。如果使用不是很频繁时 ，可以使用此方法，这样可以降低创建新对象的开销。
（2）	使用同步：
Public class dateutil{
       Private simpledateformat sdf = new simpledateformat(“yyyymmdd”);
       Private date parse(String datestr) throws praseexception{
                    Synchronized(sdf){
                       Return sdf.parse(datestr);
                }
       }
       Private string format(date date){
                    Synchronized(sdf){
                          Return sdf.format(date);
                }
      }
}
不过，当线程较多时，当一个线程调用该方法，其他想要调用该方法的线程就要block，这样的操作会一定程度上影响性能。
最推荐的是第三种方法，那就是借助threadlocal对象为每个线程只创建一个实例。
Public class deteutil{
Private static final string data_format = “yyyymmdd”;
Private static threadlocal threadlocal = new threadlocal(){
     Protected synoronized object initialvalue() {
           Return new simpledateformat(date_format);
     }
};
Public static dateformat getdateformat(){
       Return (dateformat) threadlocal.get();
}
Public static date parse(String textdate) throws parseexception {
       Return getdateformat().parse(textdate);
}
}
