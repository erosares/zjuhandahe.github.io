URL： http://www.infoq.com/cn/articles/ftf-java-volatile
主要底层原理：
{
volatile修饰的变量进行写操作时候会多出一行汇编语言：0x01a3de1d: movb $0x0,0x1104800(%esi);0x01a3de24: lock addl $0x0,(%esp);
lock前缀的指令在多核处理器中会引发下面两件事情：
         1、将当前处理器缓存行的数据写回到系统内存。
         2、这个写回内存的操作会引起其他CPU里缓存了该内存地址的数据失效。
处理器为了提高速度，不直接和内存进行通讯，而是将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作之后不知道何时再写回到内存。
对声明了volatile变量进行写操作，JVM会向处理器发送一条lock前缀的指令，将这个变量所在缓存行的数据回写到内存中。
在多处理器下，为了保证处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存是不是过期了，当处理器发现
     自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态。
当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。
}



Lock前缀指令会引起处理器缓存回写到内存。缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据。
一个处理器的缓存回写到内存会导致其他处理器的缓存无效。
