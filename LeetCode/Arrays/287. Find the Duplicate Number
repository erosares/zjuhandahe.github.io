Description:
    Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, 
        find the duplicate one.
Note:
    1. You must not modify the array (assume the array is read only).
    2. You must use only constant, O(1) extra space.
    3. Your runtime complexity should be less than O(n2).
    4. There is only one duplicate number in the array, but it could be repeated more than once.

---------------------------------------------------------------------------------------------------------------------------------------MY----------------------------------------------------------------------------------------------------------------------------
Analysis:
    方法一：标志位方法，设定长度为n的数组flags作为标志，遍历nums，在对应位置的flags[nums[i]-1]++，最后统计flags[j]>1的那个位置，则返回j+1。
    方法二：二分查找法，这里比较的是mid，而不是nums[mid]。
                      假设原始数组[1,2,3,4,5,6,X,7,8,10]，其中X为多出的一个数字；
                      那么在该数组中小于等于mid = 5的个数小于等于5的时候，则重复的数就应该在数字大的那部分；
                      否则，重复的数字就应该在数字小的那部分。
    方法三：映射找环法 URL: https://segmentfault.com/a/1190000003817671
                      1. 假设数组中没有重复，那我们可以做到这么一点，就是将数组的下标和1到n每一个数一对一的映射起来。比如数组是213,则映射关系为0->2, 1->1, 2->3。
                      假设这个一对一映射关系是一个函数f(n)，其中n是下标，f(n)是映射到的数。如果我们从下标为0出发，根据这个函数计算出一个值，以这个值为新的下标，
                      再用这个函数计算，以此类推，直到下标超界。实际上可以产生一个类似链表一样的序列。比如在这个例子中有两个下标的序列，0->2->3。
                      2. 但如果有重复的话，这中间就会产生多对一的映射，比如数组2131,则映射关系为0->2, {1，3}->1, 2->3。这样，我们推演的序列就一定会有环路了，这里下标的
                      序列是0->2->3->1->1->1->1->...，而环的起点就是重复的数。
                      3. 所以该题实际上就是找环路起点的题，和Linked List Cycle II一样。我们先用快慢两个下标都从0开始，快下标每轮映射两次，慢下标每轮映射一次，直到两个下标
                      再次相同。这时候保持慢下标位置不变，再用一个新的下标从0开始，这两个下标都继续每轮映射一次，当这两个下标相遇时，就是环的起点，也就是重复的数。
                      对这个找环起点算法不懂的，请参考Floyd's Algorithm。https://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare
                      原理：在一个环形跑道上，两个运动员在同一地点起跑，一个运动员速度快，一个运动员速度慢。当两人跑了一段时间，速度快的运动员必然会从速度慢的运动员
                                   身后再次追上并超过，原因很简单，因为跑道是环形的。
                      **************************注意点：第一次找快慢指针相遇用do-while循环
                      
Solutions:
    解法一：
        public static int findDuplicate(int[] nums) {
            if (nums == null || nums.length == 0) return 0;
            int n = nums.length;
            int[] flags = new int[n - 1];
            for (int i = 0; i < n; i++) {
                flags[nums[i] - 1]++;
            }
            for (int i = 0; i < n - 1; i++) {
                if (flags[i] > 1) return i + 1;
            }
            return 0;
        }
    解法二：
       public static int findDuplicate(int[] nums) {
        int low = 0, high = nums.length - 1;
        while(low <= high){
            // 找到中间那个数
            int mid = low + (high - low) / 2;
            int cnt = 0;
            // 计算总数组中有多少个数小于等于中间数
            for(int i = 0; i < nums.length; i++){
                if(nums[i] <= mid){
                    cnt++;
                }
            }
            // 如果小于等于中间数的数量大于中间数，说明前半部分必有重复
            if(cnt > mid){
                high = mid - 1;
                // 否则后半部分必有重复
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    解法三：
        public int findDuplicate(int[] nums) {
            int slow = 0;
            int fast = 0;
            // 找到快慢指针相遇的地方
            do{
                slow = nums[slow];
                fast = nums[nums[fast]];
             } while(slow != fast);
             int find = 0;
             // 用一个新指针从头开始，直到和慢指针相遇
             while(find != slow){
                 slow = nums[slow];
                 find = nums[find];
             }
             return find;
         }
