Description:
    Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the 
        candidate numbers sums to T.
    The same repeated number may be chosen from C unlimited number of times.
    Note:
        All numbers (including target) will be positive integers.
        The solution set must not contain duplicate combinations.
Example:
    For example, given candidate set [2, 3, 6, 7] and target 7, 
    A solution set is: 
        [
          [7],
          [2,2,3]
        ]
----------------------------------------------------------------MY--------------------------------------------------------------
Analysis:
    回溯
Solution:
    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> rets = new ArrayList<List<Integer>>();
        getResult(rets, new ArrayList<Integer>(), candidates, target, 0);
        return rets;
    }

    private static void getResult(List<List<Integer>> lists, List<Integer> list, int[] candidates, int target, int start) {
        if (target > 0) {
            for (int i = start; i < candidates.length && target >= candidates[i]; i++) {
                list.add(candidates[i]);
                getResult(lists, list, candidates, target - candidates[i], i);
                list.remove(list.size() - 1);
            }
        } else if (target == 0) {
            lists.add(new ArrayList<Integer>(list));
//            lists.add(list);//error
        }
    }

