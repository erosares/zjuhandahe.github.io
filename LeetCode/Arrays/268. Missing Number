
Description:
    Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
Example:
    For example,
    Given nums = [0, 1, 3] return 2.
Note:
    Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?
    
--------------------------------------------------------------------------------------------------------------------MY--------------------------------------------------------------------------------------------------------------------------------------
Analysis:
    第一種：（标志位方法）
                      由于数字是递增的，且差值恒为1，那么不存在缺失数字的情况下，数组中每个数值应该和数组下标是一致的；
                      那么就可以新创建一个长度为n+1（其实就是不存在缺失数字情况下数组长度）的数组flags，初始化数组数值均为0；
                      循环缺失数组nums，并将数值对应的flags位置的数值设为1；
                      循环flags，则第一个数值为0的位置就是缺失的数值。
    第二種：（数学方式）
                      数字不缺失情况下，其为等差数列，A(0)=0  A(n+1)=n  len=n+1，则正常情况下和为sumAll = ((0+n)*(n+1))/2；
                      数字缺失情况下，其和通过循环累加可得sumMiss；
                      则缺失的数字为 miss = sumAll -sumMiss。
Solutions:
    第一種：
        public static int missingNumber(int[] nums) {
            int miss = 0;
            int n = nums.length;
            if (n == 0) return -1;
            int[] flags = new int[n + 1];
            for (int i = 0; i < n; i++) {
                flags[nums[i]] = 1;
            }
            for (int i = 0; i < n + 1; i++) {
                if (flags[i] == 0) miss = i;
            }
            return miss;
        }
    第二種：
        public static int missingNumber(int[] nums) {
            int miss = 0;
            int n = nums.length;
            if (n == 0) return -1;
            int sumAll = (0 + n) * (n + 1) / 2;
            int sumMiss = 0;
            for (int num : nums) {
                sumMiss += num;
            }
            return sumAll - sumMiss;
       }
