Description:
    Given a 2D board and a word, find if the word exists in the grid.
    The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. 
    The same letter cell may not be used more than once.
Example:
    Given board =
    [
      ['A','B','C','E'],
      ['S','F','C','S'],
      ['A','D','E','E']
    ]
    word = "ABCCED", -> returns true,
    word = "SEE", -> returns true,
    word = "ABCB", -> returns false.
    
------------------------------------------------------------------------------------------------------------------MY-----------------------------------------------------------------------------------------------------------------------
Analysis:
    使用回溯的方法；
    这里外循环必须是循环二维数组，并在循环内回溯判断word是否匹配；
    boolean exist(char[][] board, int x, int y, String word, int start)方法解析：
        当判断的厨师位置比word大于等于时，表明匹配结束，成功；
        越界的判断；
        当(board[x][y] == word.charAt(start++))为True时，需要将该位置的字符取出并去除，以免重复判断；
        实行回溯调用，从该位置有四个方向可以判断，因为之前该位置被设置为'#'，所以不担心会重复判断；
        判断结束后，将字符放回，以供本次失败后下次使用。
Solutions:
    public static boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (exist(board, i, j, word, 0)) return true;
            }
        }
        return false;
    }

    private static boolean exist(char[][] board, int x, int y, String word, int start) {
        if (start >= word.length()) return true;
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return false;
        if (board[x][y] == word.charAt(start++)) {
            char c = board[x][y];
            board[x][y] = '#';
            boolean res = exist(board, x + 1, y, word, start) || exist(board, x - 1, y, word, start) ||
                    exist(board, x, y + 1, word, start) || exist(board, x, y - 1, word, start);
            board[x][y] = c;
            return res;
        }
        return false;
    }
