Description:
  Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
  Find all the elements of [1, n] inclusive that do not appear in this array.
  Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
  
Example:
  Input:
   [4,3,2,7,8,2,3,1]

  Output:
   [5,6]
   
-------------------------------------------------------------MY------------------------------------------------------------------

Analysis:
  思路一：
        新建一个新的数组用于存放各位置出现数字的次数。遍历数组，累计数组原本位置出现的数组的次数，再遍历新建的数组，返回为0的位置+1。
  思路二：
        运用标志位的方法来做，把原数组中出现的数，其应该所在位置上置为负值，然后重新遍历，如果大于0，则表示从未出现过。
  
Solutions:
  解法一：
    public List<Integer> findDisappearedNumbers(int[] nums) {
		   List<Integer> list = new ArrayList<Integer>();
		   int size = nums.length;
		   int[] res = new int[size];
		   for (int i = 0; i < size; i++) {
			   res[nums[i] - 1]++;
		   }
		   for (int i = 0; i < size; i++) {
			   if (res[i] == 0)
				   list.add(i + 1);
		   }
		   return list;
	   }
  解法二：
     public List<Integer> findDisappearedNumbers(int[] nums) {
		   List<Integer> list = new ArrayList<Integer>();
		   if (nums == null || nums.length == 0)
			   return list;
		   for (int i = 0; i < nums.length; i++) {
			   int index = Math.abs(nums[i]) - 1;
			   if (nums[index] > 0)
				   nums[index] = -nums[index];
		   }
		   for (int i = 0; i < nums.length; i++) {
			   if (nums[i] > 0)
				   list.add(i + 1);
		   }
		   return list;
	   }
