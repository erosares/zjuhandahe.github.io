Description:
    Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.
Note:
    1. The length of both num1 and num2 is < 110.
    2. Both num1 and num2 contains only digits 0-9.
    3. Both num1 and num2 does not contain any leading zero.
    4. You must not use any built-in BigInteger library or convert the inputs to integer directly.
----------------------------------------------------------------MY---------------------------------------------------------------------
Analysis:
    Analysis one:
        模拟两个数相乘，将逐位的乘机放在list中，并实现两个String相加，模拟加法。
    Analysis two:
        观察得到：num1 * num2，乘积的总位数为num1.length + num2.length，并且:
                     num1[i] * num2[j]` will be placed at indices `[i + j`, `i + j + 1]` 。
Solutions:
    Solution one:
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) return "0";
        List<String> nums = new ArrayList<>();
        for (int i = num1.length() - 1; i >= 0; i--) {
            int jinwei = 0;
            StringBuilder sb = new StringBuilder("");
            int num = 0;
            for (int j = num2.length() - 1; j >= 0; j--) {
                int temp = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');
                num = (temp + jinwei) % 10;
                jinwei = (temp + jinwei) / 10;
                sb.append(num);
                if (sb.length() == num2.length() && jinwei != 0) {
                    sb.append(jinwei);
                }
            }
            nums.add(sb.reverse().toString());
        }
        StringBuilder sb = new StringBuilder("");
        List<String> numsLast = new ArrayList<>();
        numsLast.add(nums.get(0));
        for (int i = 1; i < nums.size(); i++) {
            numsLast.add(nums.get(i) + sb.append("0"));
        }
        String res = "";
        for (int i = 0; i < numsLast.size() - 1; i = i + 2) {
            res = bigStringAdd(res,bigStringAdd(numsLast.get(i), numsLast.get(i + 1)));
        }
        if (numsLast.size() % 2 != 0) {
            res = bigStringAdd(res, numsLast.get(numsLast.size() - 1));
        }
        return res;
    }

    private String bigStringAdd(String num1, String num2) {
        int n1 = num1.length();
        int n2 = num2.length();
        int n = Math.max(n1, n2);
        StringBuilder sb1 = new StringBuilder("");
        for (int i = 0; i < (n - n1); i++) {
            sb1.append("0");
        }
        num1 = sb1.append(num1).toString();
        StringBuilder sb2 = new StringBuilder("");
        for (int i = 0; i < (n - n2); i++) {
            sb2.append("0");
        }
        num2 = sb2.append(num2).toString();
        int sum = 0;
        int jinwei = 0;
        StringBuilder sb = new StringBuilder("");
        for (int i = n - 1; i >= 0; i--) {
            int temp = (num1.charAt(i) - '0') + (num2.charAt(i) - '0') + jinwei;
            sum = temp % 10;
            jinwei = temp / 10;
            sb.append(sum);
            if (sb.length() == n && jinwei == 1) {
                sb.append("1");
            }
        }
        return sb.reverse().toString();
    }
    Solution two:
         public String multiply(String num1, String num2) {
             int m = num1.length();
             int n = num2.length();
             int[] posts = new int[m+n];
             for(int i=m-1;i>=0;i--){
                 for(int j=m-1;j>=0;j--){
                     int temp = (num1.charAt(i)-'0') * (num2.charAt(j));
                     int post1 = i+j;
                     int post2 = i+j+1;
                     int sum = temp + posts[post2];
                     
                     posts[post1] += sum / 10;
                     posts[post2] = sum %10;
                     
                 }
             }
             Stringbuilder sb = new StringBuilder("");
             for(int num : posts){
                 if(!(posts.length==0 || num == 0)){
                     sb.append(num);
                 }
             }
             return sb.length()==0?"0":sb.toString();
         }
