Description:
    Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, 
    reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.
Example:
    Input: s = "abcdefg", k = 2
    Output: "bacdfeg"
Restrictions:
    1. The string consists of lower English letters only.
    2. Length of the given string and k will in the range [1, 10000]
------------------------------------------------------------------------------------------------------------------------MY--------------------------------------------------------------------------------------------------------------------------------------
Analysis:
    题目解释：
        给定一个字符串和一个整数k，你需要反转从字符串开始计数的每2k个字符的前k个字符。 如果剩余少于k个字符，则将所有字符都反转。 如果小于2k但大于或等于k个
            字符，则反转前k个字符，并将另一个作为原始字符。
    解法：
        字符串长度对2k进行整除得到indexs（表示有多少个2k），以及对2k取余left（表示还剩多少），再按照题意进行操作即可。
    注意点：
        k==1的情况需要注意。
Solution:
    public static String reverseStr(String s, int k) {
        if (s == null || s.length() == 0) return "";
        if (k <= 1) return s;
        char[] chars = s.toCharArray();
        int indexs = chars.length / (2 * k);
        for (int i = 0; i < indexs; i++) {
            reverse(chars, i * 2 * k, i * 2 * k + k - 1);
        }
        int left = chars.length % (2 * k);
        if (left > 0 && left <= k) {
            reverse(chars, 2 * k * indexs, chars.length - 1);
        } else {
            reverse(chars, 2 * k * indexs, 2 * k * indexs + k - 1);
        }
        return new String(chars);
    }

    private static void reverse(char[] chars, int i, int j) {
        while (i < j && j <= chars.length - 1) {
            char temp = chars[i];
            chars[i] = chars[j];
            chars[j] = temp;
            i++;
            j--;
        }
    }
