Description:
    You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater 
        numbers for nums1's elements in the corresponding places of nums2.
    The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for 
        this number.
Example:
    Example 1:
    Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
    Output: [-1,3,-1]
    Explanation:
        For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
        For number 1 in the first array, the next greater number for it in the second array is 3.
        For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
    Example 2:
    Input: nums1 = [2,4], nums2 = [1,2,3,4].
    Output: [3,-1]
    Explanation:
        For number 2 in the first array, the next greater number for it in the second array is 3.
        For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
    1. All elements in nums1 and nums2 are unique.
    2. The length of both nums1 and nums2 would not exceed 1000.
---------------------------------------------------------------MY----------------------------------------------------------------
Analysis:
    Analysis one:
        运用双重循环方法，外层遍历findNums(即nums1)，内层遍历nums(即nums2)，遍历内层比较findNums[i]和nums2[j]，记录相等时index=j值
            （index初值设为nums2.length），再向后比较nums2[j]>findNums[i]，找到首次大于的位置（该判断需要加上j>index）。
    Analysis two:
        运用栈stack方式，定义一个map用于存放nums2中每个元素grater的key-value对，num前面没有比较小于num的数。
Solution:
    Solution one:
    public int[] nextGreaterElement(int[] findNums, int[] nums) {
        int[] res = new int[findNums.length];
        for (int i = 0; i < findNums.length; i++) {
            int index = nums.length;
            for (int j = 0; j < nums.length; j++) {
                if (nums[j] == findNums[i]) {
                    index = j;
                    if (j == nums.length - 1) res[i] = -1;
                } else if (nums[j] > findNums[i] && j > index) {
                    res[i] = nums[j];
                    break;
                } else {
                    res[i] = -1;
                }
            }
        }
        return res;
    }
    Solution two:
    public int[] nextGreaterElement(int[] findNums, int[] nums) {
        Map<Integer,Integer> map = new HashMap<>():
        Stack<Integer> stack = new Stack<>();
        for(int num : nums){
            while(!stack.isEmpty() && stack.peek() < num){
                map.push(stack.pop(),num);
            }
            stack.put(num);
        }
        for(int i=0;i<findNums.length;i++){
            findNums[i] = map.getOrDefault(findNums[i],-1);
        }
    }
