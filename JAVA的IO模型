1、同步和异步：
   同步：事件逐个执行。A、B两个任务，B必须等待A执行完才可执行。
   异步：事件并发执行，互不等待。A、B两个任务，并发执行，没有先后等待关系。
  重点在于：多个任务和事件发生时，一个事件的发生或执行是否会导致整个流程的暂时等待。
2、阻塞和非阻塞：
   阻塞：某个事件或任务在执行过程中，发送一个请求，请求的条件不满足，那么就一直等待，直到条件满足。
   非阻塞：某个事件或任务在执行过程中，发送一个请求，请求的条件不满足，会立即返回一个标志信息告知条件不满足，不会一直等待条件满足。
  重点在于：发出一个请求操作时，如果进行操作的条件不满足是否会返会一个标志信息告知条件不满足。
3、阻塞I/O，非阻塞I/O：
   通常来说，IO操作包括：对硬盘的读写、对socket的读写以及外设的读写。一个完整的IO读请求包括两个阶段：（1）查看数据是否就绪；（2）进行数据拷贝
      （内核将数据拷贝到用户线程）。
   阻塞I/O和非阻塞I/O的区别就是在于第一阶段，如果数据没有就绪，在查看数据是否就绪的过程中是一直等待，还是直接返回一个标志信息。
4、同步I/O，异步I/O：
   事实上，同步IO和异步IO模型是针对用户线程和内核的交互来说的。
   同步IO：当用户发出IO请求之后，如果数据没有就绪，需要通过用户线程或者内核剪不断地去轮询数据是否就绪，当数据就绪时，再将数据从内核拷贝到用户线程；
   异步IO：只有IO请求操作的发出是由用户线程来进行的，IO操作的两个阶段都是由内核自动完成，然后发送通告告知用户线程IO操作已经完成。也就是说在异步IO中，
          不会对用户线程进行任何阻塞。
   重点在于：同步IO和异步IO的关键区别反映在数据拷贝阶段是由用户线程完成还是内核完成。所以说异步IO必须要有操作系统的底层支持。
5、五种IO模型：
   阻塞IO模型、非阻塞IO模型(NIO)、多路复用IO模型、信号驱动Io模型、异步IO模型
6、两种高性能IO设计模型
   传统的网络服务设计：一种是多线程，一种是线程池。
   新的两种高性能IO设计模式：Reactor和Proactor。
       在Reactor模式中，会先对每个client注册感兴趣的事件，然后又一个线程专门去轮询每个client是否有事件发生，当有事件发生时，便顺序处理每个事件，
           当所有事件处理完之后，便再转去继续轮询。多路复用IO就是采用Reactor模式。
       在Proactor模式中，当检测到有事件发生时，会新起一个异步操作，然后交由内核线程去处理，当内核线程完成IO操作之后，发送一个通告告知操作已完成，
           可以得知，异步Io模型采用的就是Proactor模型。
   
