17. Letter Combinations of a Phone Number 
    Given a digit string, return all possible letter combinations that the number could represent.
    A mapping of digit to letters (just like on the telephone buttons) is given below.
          Input:Digit string "23"
          Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
    Code:
          List<String> res = new ArrayList<String>();
          String[] dict = new String[] { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
          
          public List<String> letterCombinations(String digits)
          {
             combination(digits, 0, "");
             return res;
          }

          private void combination(String digits, int k, String current)
          {
            if (k == digits.length())
              {
                 if (!current.isEmpty())
                     res.add(current);
                 return;
              }
            String s = dict[digits.charAt(k) - '0'];
            for (Character c : s.toCharArray())
              {
                 combination(digits, k + 1, current + c);
              }
          }


258. Add Digits
      Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

      For example:
      Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
      
      Code:（逐位相加）
          public int addDigits(int num)
          {
             while (num >= 10)
              {
                num = num/10 +num%10;
              }
             return num;
          }

227. Basic Calculator II
      Implement a basic calculator to evaluate a simple expression string.
      The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division 
      should truncate toward zero.
      
      Code:
      public int calculate(String s) {
        if(s==null || s.length() == 0) return 0;
        
        Stack<Integer> stack = new Stack<Integer>();
        int res = 0;
        int sign = 1;
        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if(Character.isDigit(c)) {
                int cur = c-'0';
                while(i+1<s.length() && Character.isDigit(s.charAt(i+1))) {
                    cur = 10*cur + s.charAt(++i) - '0';
                }
                res += sign * cur;
            } else if(c=='-') {
                sign = -1;
            } else if(c=='+') {
                sign = 1;
            } else if( c=='(') {
                stack.push(res);
                res = 0;
                stack.push(sign);
                sign = 1;
            } else if(c==')') {
                res = stack.pop() * res + stack.pop();
                sign = 1;
            }
        }
        return res;
    }
    
