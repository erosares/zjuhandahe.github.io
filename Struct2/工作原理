URL: http://blog.csdn.net/laner0515/article/details/27692673/
一个请求在Struts2框架中的处理大概分为以下几个步骤 
    1、客户端初始化一个指向Servlet容器（例如Tomcat）的请求
    2、这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：
           SiteMesh Plugin） 
    3、接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action 
       FilterDispatcher是控制器的核心，就是mvc中c控制层的核心。下面粗略的分析下我理解的FilterDispatcher工作流程和原理：FilterDispatcher进行初始化并启用核心doFilter
     4、如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy 
    5、ActionProxy通过ConfigurationManager询问框架的配置文件，找到需要调用的Action类 ,这里，我们一般是从struts.xml配置中读取。
    6、ActionProxy创建一个ActionInvocation的实例。
    7、ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。
         下面我们来看看ActionInvocation是如何工作的：
    ActionInvocation是Xworks 中Action 调度的核心。而对Interceptor 的调度，也正是由ActionInvocation负责。ActionInvocation 是一个接口，而DefaultActionInvocation 则是Webwork 对
    ActionInvocation的默认实现。
    Interceptor的调度流程大致如下：
          1.ActionInvocation初始化时，根据配置，加载Action相关的所有Interceptor。
          2. 通过ActionInvocation.invoke方法调用Action实现时，执行Interceptor。
    Interceptor将很多功能从我们的Action中独立出来，大量减少了我们Action的代码，独立出来的行为具有很好的重用性。XWork、WebWork的许多功能都是有Interceptor实现，可以
    在配置文件中组装Action用到的Interceptor，它会按照你指定的顺序，在Action执行前后运行。
     8、一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper

     在上述过程中所有的对象（Action，Results，Interceptors，等）都是通过ObjectFactory来创建的。
