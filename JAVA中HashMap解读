URL：http://ydlmlh.iteye.com/blog/2220722
HashMap中有两个影响其性能：初始容量和加载因子。默认的初始容量是16，加载因子是0.75。
       容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的
           条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。
HashMap实质上是数组和单链表结合体，数组存放key，单链表存放value。
重要两点： 
       1、HashMap是通过键的hashCode来快速存取元素；
       2、当不同的对象hashCode发生碰撞时，HashMap通过单链表解决问题，将新元素加入链表表头，通过next指向原有的元素。单链表在java中的实现就是对象的引用
         （复用）。
HashMap中的容量必须是2的幂，因为只有是2的幂，对length取余才能转化为对（length-1）的与操作。
在多线程中使用HashMap：
       1、在外部包装HashMap，实现同步机制；
       2、使用Map m=Collections.synchronizedMap(new HashMap(...))，这里对HashMap做了一次包装；
       3、使用java.util.HashTable；
       4、使用java.util.concurrent.ConcurrentHashMap，相对安全，效率更高。

URL: http://firezhfox.iteye.com/blog/2241043
http://www.importnew.com/21396.html

HashMap线程不安全的体现：
       URL：http://www.importnew.com/22011.html
       1、resize死循环
          resize()-->transfer()
          --transFor代码
          void transfer(Entry[] newTable, boolean rehash) {
            int newCapacity = newTable.length;
            for (Entry<K,V> e : table) {
                while(null != e) {
                    Entry<K,V> next = e.next;
                    if (rehash) {
                        e.hash = null == e.key ? 0 : hash(e.key);
                    }
                    int i = indexFor(e.hash, newCapacity);
                    e.next = newTable[i];
                    newTable[i] = e;
                    e = next;
                 }
            }
            }
          简单解读transfer代码：
          
    对索引数组中的元素遍历
    对链表上的每一个节点遍历：用 next 取得要转移那个元素的下一个，将 e 转移到新 Hash 表的头部，使用头插法插入节点。
    循环2，直到链表节点全部转移
    循环1，直到所有索引数组全部转移

    经过这几步，我们会发现转移的时候是逆序的。假如转移前链表顺序是1->2->3，那么转移后就会变成3->2->1。这时候就有点头绪了，死锁问题不就是因为1->2的
        同时2->1造成的吗？所以，HashMap 的死锁问题就出在这个transfer()函数上。
