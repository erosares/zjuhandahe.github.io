一、虚拟机类加载机制：
    虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。
二、类加载过程：
    类从被加载到虚拟机内存中开始，到卸载出内存为止，他的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析
    （Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个部分统称为连接（Linking）。
    加载 --->  { 验证 ---> 准备 ---> 解析}连接 --->  初始化 ---> 使用 ---> 卸载。
    1. 对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会出触发类的初始化而不会触发子类的初始化。
       （父类和子类中均有静态代码块，但只有父类中有静态字段，且其他类调用了这个静态字段）
    2. 数组在编译时也不会触发类的初始化。
    3. 调用静态常量也不会触发类的初始化。
    
    （1）加载
         在加载阶段，虚拟机需要完成以下3件事情：
         1. 通过一个类的全限定名来获取此类的二进制字节流。
         2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
         3. 在内存中生成一个这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。
    （2）验证
         验证阶段大致上会完成下面4个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证
         1. 文件格式验证：
            第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理；
            该验证阶段的主要目的是保证输入的字符流能正确地解析并存储在方法区，格式上符合描述一个Java类型信息的要求；
            这个阶段的验证是基于二进制字节流进行的，只有通过这个阶段的验证后，字节流才会进入方法区中进行存储。
         2. 元数据验证：
            第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息。
         3. 字节码验证********重点
            第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的；
            在第二阶段对元数据信息中的数据类型昨晚校验后，这个阶段对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。
         4. 符号引用验证：
            最后一个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候；
            符号引用验证的目的是确保动作能正常运行，如果无法通过符号引用验证，那么将会抛出一个java.lang.IncompatibleClassChangeError异常的子类。
    （3）准备
         准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。
         类变量为被static修饰的变量。    变量被设置初始值，而不是代码中写的值。
    （4）解析
         解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。（符号引用以一组符号来描述所引用的目标；直接引用可以是直接指向目标的指针、相对偏
            移量或是一个能间接定位到目标的句柄。
         解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行，分别对应于常量池CONSTANT_CLASS_info、
            CONSTANT_Fiedref_info、CONSTANT_Methodref.info、CONSTANT_InterfaceMethonref_info、CONSTANT_MethodType_info、
            CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType.info、CONSTANT_MethodHandle_info和CONSTANT_InvokeDynamic_info7种常量类型
         1. 类或接口的解析；2. 字段解析； 3. 类方法解析；4. 接口方法解析。
              
           
          
